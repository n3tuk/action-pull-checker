#!/usr/bin/env bash

# Multiple git tags can point to a release in order to allow support for using
# owner/action@v1 or owner/action@v1.2 to point to the semver release v1.2.x. As
# such, convert the tag to a commit, and the commit to a release, then download
# the package in the release.

set -ueo pipefail

# Collate GitHub Action information
REPO="${1:-n3tuk/action-pull-requester}"
REFERENCE="${2:-unknown}"

# Collate local information
ARCH=amd64
ARCHIVE=${GITHUB_ACTION_PATH}/scripts/pull-requester.tar.gz
BIN_DIR=${GITHUB_ACTION_PATH}/bin

echo "::debug::Looking for a release for ${REPO}@${REFERENCE}"
if [[ "${REFERENCE}" == "unknown" ]]
then
  echo "::error::Unknown or missing reference provided for the GitHub Action ${REPO}"
  exit 1
fi

# First obtain all the tags on the repository, which will be related to a
# release, and then validate the action tag used is in that list
TAGS_FOR_REFERENCE=$(
  gh api \
    -H "Accept: application/vnd.github+json" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    "/repos/${REPO}/git/refs/tags" \
  | jq -r '
      # Convert tags into v0.0.0 format only
        [.[] | .ref |= sub("^refs/tags/"; "")]
      # Convert tag => sha
      | map({(.ref): .object.sha})
      | add
      # Break the map into key/value pairs
      | to_entries
      # Swap key => value
      | map({(.value) : {(.key):null}})
      # Combine all key => value copies
      | reduce .[] as $item ({}; . * $item)
      | to_entries
      # Combine all values into an array on the key
      | map({key:.key, value:(.value|keys|reverse)})
      | .[]
      # Find the key => value pair which contains $REFERENCE in the value
      | select(.value | index("'"${REFERENCE}"'"))
      | .value
      # Output the all the known tags for the same $REFERENCE
      | .[]'
)

if [[ -z "${TAGS_FOR_REFERENCE}" ]]
then
  echo "::error::${REPO}@${REFERENCE} does not point to a valid tag for this GitHub Action"
  exit 1
fi

echo "::debug::Found tags ${TAGS_FOR_REFERENCE//[$'\n ']/, } for reference ${REFERENCE}"

RELEASE=$(
  gh api \
    -H "Accept: application/vnd.github+json" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    "/repos/${REPO}/releases" \
  | jq -r '
        .[] | select(.published_at != null) | select(.tag_name | IN("'"${TAGS_FOR_REFERENCE//[$'\n ']/\", \"}"'")) | .tag_name'
)

echo "::debug::Release is ${RELEASE}"

echo "::debug::Requesting pull-requester-${RELEASE#v}-linux-${ARCH}.tar.gz"
if ! curl --silent --location --header "Authorization: Bearer ${GITHUB_TOKEN}" --output "${ARCHIVE}" \
    "https://github.com/${REPO}/releases/download/v${RELEASE#v}/pull-requester-${RELEASE#v}-linux-${ARCH}.tar.gz"
then
  echo "::error::Unable to download the package pull-requester-${RELEASE#v}-linux-${ARCH}.tar.gz"
  exit 1
fi

echo "::debug::Successfully downloaded pull-requester-${RELEASE#v}-linux-${ARCH}.tar.gz"

tar xzf "${ARCHIVE}" -C "${BIN_DIR}"
rm -f "${ARCHIVE}"
